{"ast":null,"code":"var _jsxFileName = \"/Users/loganatkinson/momentum-assignments/react-trivia-thenlogansays/trivia/src/components/AnswerOpt.js\",\n    _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport he from 'he';\nimport shuffle from 'lodash/shuffle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AnswerOpt = props => {\n  _s();\n\n  const {\n    answers,\n    checkAnswer,\n    setAnswered\n  } = props;\n  const {\n    correctAnswer,\n    incorrectAnswers\n  } = answers;\n  const shuffledAnswers = useMemo(() => shuffle([correctAnswer, ...incorrectAnswers]), [correctAnswer, incorrectAnswers]);\n\n  const handleClick = option => {\n    setAnswered(true);\n    checkAnswer(correctAnswer === option);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: shuffledAnswers.map((option, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"contrast\",\n      onClick: () => handleClick(option),\n      children: he.decode(option)\n    }, option, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AnswerOpt, \"chwJ94yDbXtYYJLWKVUniWPl3HU=\");\n\n_c = AnswerOpt;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnswerOpt\");","map":{"version":3,"sources":["/Users/loganatkinson/momentum-assignments/react-trivia-thenlogansays/trivia/src/components/AnswerOpt.js"],"names":["useMemo","he","shuffle","AnswerOpt","props","answers","checkAnswer","setAnswered","correctAnswer","incorrectAnswers","shuffledAnswers","handleClick","option","map","idx","decode"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,OAAO,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAClC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,WAAX;AAAwBC,IAAAA;AAAxB,MAAwCH,KAA9C;AACA,QAAM;AAAEI,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAsCJ,OAA5C;AACA,QAAMK,eAAe,GAAGV,OAAO,CAC7B,MAAME,OAAO,CAAC,CAACM,aAAD,EAAgB,GAAGC,gBAAnB,CAAD,CADgB,EAE7B,CAACD,aAAD,EAAgBC,gBAAhB,CAF6B,CAA/B;;AAKA,QAAME,WAAW,GAAIC,MAAD,IAAY;AAC9BL,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAD,IAAAA,WAAW,CAACE,aAAa,KAAKI,MAAnB,CAAX;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,cACGF,eAAe,CAACG,GAAhB,CAAoB,CAACD,MAAD,EAASE,GAAT,kBACnB;AACE,MAAA,SAAS,EAAC,UADZ;AAGE,MAAA,OAAO,EAAE,MAAMH,WAAW,CAACC,MAAD,CAH5B;AAAA,gBAKGX,EAAE,CAACc,MAAH,CAAUH,MAAV;AALH,OAEOA,MAFP;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA1BM;;GAAMT,S;;KAAAA,S","sourcesContent":["import { useMemo } from 'react'\nimport he from 'he'\nimport shuffle from 'lodash/shuffle'\n\nexport const AnswerOpt = (props) => {\n  const { answers, checkAnswer, setAnswered } = props\n  const { correctAnswer, incorrectAnswers } = answers\n  const shuffledAnswers = useMemo(\n    () => shuffle([correctAnswer, ...incorrectAnswers]),\n    [correctAnswer, incorrectAnswers]\n  )\n\n  const handleClick = (option) => {\n    setAnswered(true)\n    checkAnswer(correctAnswer === option)\n  }\n\n  return (\n    <div className='grid'>\n      {shuffledAnswers.map((option, idx) => (\n        <button\n          className='contrast'\n          key={option}\n          onClick={() => handleClick(option)}\n        >\n          {he.decode(option)}\n        </button>\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}