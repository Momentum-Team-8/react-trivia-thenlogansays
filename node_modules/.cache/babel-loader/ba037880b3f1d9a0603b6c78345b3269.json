{"ast":null,"code":"var _jsxFileName = \"/Users/loganatkinson/momentum-assignments/react-trivia-thenlogansays/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { getQuestionsByCategory } from './apis';\nimport { QuestionCard } from './QuestionCard';\nimport { Score } from './Score';\nimport { Next } from './Next';\nimport { handleRefresh } from './Refresh';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Game = props => {\n  _s();\n\n  const {\n    selectedCategory\n  } = props;\n  const [questByCat, setQuestByCat] = useState([]);\n  const [currentQuestionIdx, setCurrentQuestionIdx] = useState(0);\n  const [done, setDone] = useState(false);\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    const idx = currentQuestionIdx;\n\n    if (idx > 0 && idx === questByCat.length - 1) {\n      setDone(true);\n    }\n  }, [currentQuestionIdx, questByCat]);\n  useEffect(() => {\n    getQuestionsByCategory(selectedCategory).then(data => {\n      setQuestByCat(data);\n    });\n  }, [selectedCategory]);\n\n  const incrementScore = () => {\n    setScore(score + 1);\n  };\n\n  if (done) {\n    return /*#__PURE__*/_jsxDEV(Score, {\n      numQuestions: questByCat.length,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions\",\n    children: questByCat.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Back\",\n        onClick: handleRefresh,\n        children: \"Go Back to Categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(QuestionCard, {\n        question: questByCat[currentQuestionIdx],\n        incrementScore: incrementScore,\n        children: /*#__PURE__*/_jsxDEV(Next, {\n          setCurrentQuestionIdx: () => setCurrentQuestionIdx(currentQuestionIdx + 1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"zKAqYA9N1zGE4syUlywjUXi4ZFQ=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/loganatkinson/momentum-assignments/react-trivia-thenlogansays/src/components/Game.js"],"names":["useEffect","useState","getQuestionsByCategory","QuestionCard","Score","Next","handleRefresh","Game","props","selectedCategory","questByCat","setQuestByCat","currentQuestionIdx","setCurrentQuestionIdx","done","setDone","score","setScore","idx","length","then","data","incrementScore"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,sBAAT,QAAuC,QAAvC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,aAAT,QAA8B,WAA9B;;;AAEA,OAAO,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAuBD,KAA7B;AACA,QAAM,CAACE,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,kBAAD,EAAqBC,qBAArB,IAA8CZ,QAAQ,CAAC,CAAD,CAA5D;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,CAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,GAAG,GAAGN,kBAAZ;;AACA,QAAIM,GAAG,GAAG,CAAN,IAAWA,GAAG,KAAKR,UAAU,CAACS,MAAX,GAAoB,CAA3C,EAA8C;AAC5CJ,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GALQ,EAKN,CAACH,kBAAD,EAAqBF,UAArB,CALM,CAAT;AAOAV,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,sBAAsB,CAACO,gBAAD,CAAtB,CAAyCW,IAAzC,CAA+CC,IAAD,IAAU;AACtDV,MAAAA,aAAa,CAACU,IAAD,CAAb;AACD,KAFD;AAGD,GAJQ,EAIN,CAACZ,gBAAD,CAJM,CAAT;;AAMA,QAAMa,cAAc,GAAG,MAAM;AAC3BL,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD,GAFD;;AAIA,MAAIF,IAAJ,EAAU;AACR,wBAAO,QAAC,KAAD;AAAO,MAAA,YAAY,EAAEJ,UAAU,CAACS,MAAhC;AAAwC,MAAA,KAAK,EAAEH;AAA/C;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACGN,UAAU,CAACS,MAAX,GAAoB,CAApB,iBACC;AAAA,8BACE;AACE,QAAA,SAAS,EAAC,MADZ;AAEE,QAAA,OAAO,EAAEb,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAOE,QAAC,YAAD;AACE,QAAA,QAAQ,EAAEI,UAAU,CAACE,kBAAD,CADtB;AAEE,QAAA,cAAc,EAAEU,cAFlB;AAAA,+BAIE,QAAC,IAAD;AACE,UAAA,qBAAqB,EAAE,MACrBT,qBAAqB,CAACD,kBAAkB,GAAG,CAAtB;AAFzB;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAnDM;;GAAML,I;;KAAAA,I","sourcesContent":["import { useEffect, useState } from 'react'\nimport { getQuestionsByCategory } from './apis'\nimport { QuestionCard } from './QuestionCard'\nimport { Score } from './Score'\nimport { Next } from './Next'\nimport { handleRefresh } from './Refresh'\n\nexport const Game = (props) => {\n  const { selectedCategory } = props\n  const [questByCat, setQuestByCat] = useState([])\n  const [currentQuestionIdx, setCurrentQuestionIdx] = useState(0)\n  const [done, setDone] = useState(false)\n  const [score, setScore] = useState(0)\n\n  useEffect(() => {\n    const idx = currentQuestionIdx\n    if (idx > 0 && idx === questByCat.length - 1) {\n      setDone(true)\n    }\n  }, [currentQuestionIdx, questByCat])\n\n  useEffect(() => {\n    getQuestionsByCategory(selectedCategory).then((data) => {\n      setQuestByCat(data)\n    })\n  }, [selectedCategory])\n\n  const incrementScore = () => {\n    setScore(score + 1)\n  }\n\n  if (done) {\n    return <Score numQuestions={questByCat.length} score={score} />\n  }\n\n  return (\n    <div className='questions'>\n      {questByCat.length > 0 && (\n        <>\n          <button\n            className='Back'\n            onClick={handleRefresh}\n          >\n            Go Back to Categories\n          </button>\n          <QuestionCard\n            question={questByCat[currentQuestionIdx]}\n            incrementScore={incrementScore}\n          >\n            <Next\n              setCurrentQuestionIdx={() =>\n                setCurrentQuestionIdx(currentQuestionIdx + 1)}\n            />\n          </QuestionCard>\n        </>\n      )}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}