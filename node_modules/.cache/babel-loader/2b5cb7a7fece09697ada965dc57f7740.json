{"ast":null,"code":"var _jsxFileName = \"/Users/loganatkinson/momentum-assignments/react-trivia-thenlogansays/trivia/src/components/QuestionCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport he from 'he';\nimport { AnswerOpt } from './AnswerOpt';\nimport classnames from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const QuestionCard = props => {\n  _s();\n\n  const {\n    question,\n    children,\n    incrementScore\n  } = props;\n  const [answered, setAnswered] = useState(false);\n  const [correct, setCorrect] = useState(false);\n\n  const commitAnswer = () => {\n    if (correct) {\n      incrementScore();\n    }\n\n    setAnswered(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: he.decode(question.question)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(AnswerOpt, {\n          answers: {\n            correctAnswer: question.correct_answer,\n            incorrectAnswers: question.incorrect_answers\n          },\n          checkAnswer: setCorrect,\n          setAnswered: setAnswered\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: answered && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classnames({\n            primary: correct,\n            secondary: !correct\n          }),\n          children: correct ? 'Correct!' : 'Nope, Sorry'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"next\",\n          children: /*#__PURE__*/React.cloneElement(children, {\n            commitAnswer: commitAnswer\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuestionCard, \"pTf+fxxtpMy0Q0ur+ESDRjfYrMQ=\");\n\n_c = QuestionCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionCard\");","map":{"version":3,"sources":["/Users/loganatkinson/momentum-assignments/react-trivia-thenlogansays/trivia/src/components/QuestionCard.js"],"names":["React","useState","he","AnswerOpt","classnames","QuestionCard","props","question","children","incrementScore","answered","setAnswered","correct","setCorrect","commitAnswer","decode","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","primary","secondary","cloneElement"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAEA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AACrC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAAyCH,KAA/C;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMa,YAAY,GAAG,MAAM;AACzB,QAAIF,OAAJ,EAAa;AACXH,MAAAA,cAAc;AACf;;AACDE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GALD;;AAOA,sBACE;AAAA,4BACE;AAAA,gBAAIT,EAAE,CAACa,MAAH,CAAUR,QAAQ,CAACA,QAAnB;AAAJ;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAA,+BACE,QAAC,SAAD;AACE,UAAA,OAAO,EAAE;AACPS,YAAAA,aAAa,EAAET,QAAQ,CAACU,cADjB;AAEPC,YAAAA,gBAAgB,EAAEX,QAAQ,CAACY;AAFpB,WADX;AAKE,UAAA,WAAW,EAAEN,UALf;AAME,UAAA,WAAW,EAAEF;AANf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAcE;AAAA,gBACGD,QAAQ,iBACP;AAAA,gCACE;AACE,UAAA,SAAS,EAAEN,UAAU,CACnB;AACEgB,YAAAA,OAAO,EAAER,OADX;AAEES,YAAAA,SAAS,EAAE,CAACT;AAFd,WADmB,CADvB;AAAA,oBAQGA,OAAO,GAAG,UAAH,GAAgB;AAR1B;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,iCACGZ,KAAK,CAACsB,YAAN,CAAmBd,QAAnB,EAA6B;AAAEM,YAAAA,YAAY,EAAEA;AAAhB,WAA7B;AADH;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CAhDM;;GAAMT,Y;;KAAAA,Y","sourcesContent":["import React, { useState } from 'react'\nimport he from 'he'\nimport { AnswerOpt } from './AnswerOpt'\nimport classnames from 'classnames'\n\nexport const QuestionCard = (props) => {\n  const { question, children, incrementScore } = props\n  const [answered, setAnswered] = useState(false)\n  const [correct, setCorrect] = useState(false)\n\n  const commitAnswer = () => {\n    if (correct) {\n      incrementScore()\n    }\n    setAnswered(false)\n  }\n\n  return (\n    <div>\n      <p>{he.decode(question.question)}</p>\n      <div>\n        <ul>\n          <AnswerOpt\n            answers={{\n              correctAnswer: question.correct_answer,\n              incorrectAnswers: question.incorrect_answers\n            }}\n            checkAnswer={setCorrect}\n            setAnswered={setAnswered}\n          />\n        </ul>\n      </div>\n      <div>\n        {answered && (\n          <>\n            <div\n              className={classnames(\n                {\n                  primary: correct,\n                  secondary: !correct\n                }\n              )}\n            >\n              {correct ? 'Correct!' : 'Nope, Sorry'}\n            </div>\n            <div className='next'>\n              {React.cloneElement(children, { commitAnswer: commitAnswer })}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}